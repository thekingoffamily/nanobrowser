import type { BaseChatModel } from '@langchain/core/language_models/chat_models';
import type { AgentContext, AgentOutput } from '../types';
import type { BasePrompt } from '../prompts/base';
import type { BaseMessage } from '@langchain/core/messages';
import { createLogger } from '@src/background/log';
import type { Action } from '../actions/builder';
import { convertInputMessages, removeThinkTags } from '../messages/utils';
import { jsonMonitor } from '../validation/json-monitor';
import { isAbortedError } from './errors';
import { ProviderTypeEnum } from '@extension/storage';
import type { z } from 'zod';

const logger = createLogger('agent');

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type CallOptions = Record<string, any>;

// Update options to use Zod schema
export interface BaseAgentOptions {
  chatLLM: BaseChatModel;
  context: AgentContext;
  prompt: BasePrompt;
  provider?: string;
}
export interface ExtraAgentOptions {
  id?: string;
  toolCallingMethod?: string;
  callOptions?: CallOptions;
}

/**
 * Base class for all agents
 * @param T - The Zod schema for the model output
 * @param M - The type of the result field of the agent output
 */
export abstract class BaseAgent<T extends z.ZodType, M = unknown> {
  protected id: string;
  protected chatLLM: BaseChatModel;
  protected prompt: BasePrompt;
  protected context: AgentContext;
  protected actions: Record<string, Action> = {};
  protected modelOutputSchema: T;
  protected toolCallingMethod: string | null;
  protected chatModelLibrary: string;
  protected modelName: string;
  protected provider: string;
  protected withStructuredOutput: boolean;
  protected callOptions?: CallOptions;
  protected modelOutputToolName: string;
  declare ModelOutput: z.infer<T>;

  constructor(modelOutputSchema: T, options: BaseAgentOptions, extraOptions?: Partial<ExtraAgentOptions>) {
    // base options
    this.modelOutputSchema = modelOutputSchema;
    this.chatLLM = options.chatLLM;
    this.prompt = options.prompt;
    this.context = options.context;
    this.provider = options.provider || '';
    // TODO: fix this, the name is not correct in production environment
    this.chatModelLibrary = this.chatLLM.constructor.name;
    this.modelName = this.getModelName();
    this.withStructuredOutput = this.setWithStructuredOutput();
    // extra options
    this.id = extraOptions?.id || 'agent';
    this.toolCallingMethod = this.setToolCallingMethod(extraOptions?.toolCallingMethod);
    this.callOptions = extraOptions?.callOptions;
    this.modelOutputToolName = `${this.id}_output`;
  }

  // Set the model name
  private getModelName(): string {
    if ('modelName' in this.chatLLM) {
      return this.chatLLM.modelName as string;
    }
    if ('model_name' in this.chatLLM) {
      return this.chatLLM.model_name as string;
    }
    if ('model' in this.chatLLM) {
      return this.chatLLM.model as string;
    }
    return 'Unknown';
  }

  // Set the tool calling method
  private setToolCallingMethod(toolCallingMethod?: string): string | null {
    if (toolCallingMethod === 'auto') {
      switch (this.chatModelLibrary) {
        case 'ChatGoogleGenerativeAI':
          return null;
        case 'ChatOpenAI':
        case 'AzureChatOpenAI':
        case 'ChatGroq':
        case 'ChatXAI':
          return 'function_calling';
        default:
          return null;
      }
    }
    return toolCallingMethod || null;
  }

  // Check if model is a Llama model (only for Llama-specific handling)
  private isLlamaModel(modelName: string): boolean {
    return modelName.includes('Llama-4') || modelName.includes('Llama-3.3') || modelName.includes('llama-3.3');
  }

  // Set whether to use structured output based on the model name
  private setWithStructuredOutput(): boolean {
    if (this.modelName === 'deepseek-reasoner' || this.modelName === 'deepseek-r1') {
      return false;
    }

    // G4F provider often has issues with structured output, use manual JSON extraction
    if (this.provider === ProviderTypeEnum.G4F) {
      console.log(`üîß [API-CONFIG] G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –¥–ª—è –º–æ–¥–µ–ª–∏: ${this.modelName}`);
      logger.debug(
        `[${this.modelName}] G4F provider doesn't reliably support structured output, using manual JSON extraction`,
      );
      return false;
    }

    // Llama API models don't support json_schema response format
    if (this.provider === ProviderTypeEnum.Llama || this.isLlamaModel(this.modelName)) {
      logger.debug(`[${this.modelName}] Llama API doesn't support structured output, using manual JSON extraction`);
      return false;
    }

    return true;
  }

  async invoke(inputMessages: BaseMessage[]): Promise<this['ModelOutput']> {
    // üì§ [API-OUT] –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM
    console.log('üì§ [API-OUT] ===== –û–¢–ü–†–ê–í–ö–ê –ó–ê–ü–†–û–°–ê –ö LLM =====');
    console.log('üì§ [API-OUT] –ú–æ–¥–µ–ª—å:', this.modelName);
    console.log('üì§ [API-OUT] –ü—Ä–æ–≤–∞–π–¥–µ—Ä:', this.provider);
    console.log('üì§ [API-OUT] –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞:', this.chatModelLibrary);
    console.log('üì§ [API-OUT] Structured Output:', this.withStructuredOutput);
    console.log('üì§ [API-OUT] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', inputMessages.length);

    // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–ø—Ä–æ—Å–µ
    inputMessages.forEach((message, index) => {
      console.log(`üì§ [API-OUT] –°–æ–æ–±—â–µ–Ω–∏–µ ${index + 1}:`);
      console.log(`üì§ [API-OUT]   –†–æ–ª—å: ${message.constructor.name}`);

      if (typeof message.content === 'string') {
        const content = message.content;
        console.log(
          `üì§ [API-OUT]   –ö–æ–Ω—Ç–µ–Ω—Ç (${content.length} —Å–∏–º–≤–æ–ª–æ–≤):`,
          content.length > 1000 ? content.substring(0, 1000) + '...[–û–ë–†–ï–ó–ê–ù–û]' : content,
        );
      } else if (Array.isArray(message.content)) {
        console.log(`üì§ [API-OUT]   –ö–æ–Ω—Ç–µ–Ω—Ç (–º–∞—Å—Å–∏–≤ –∏–∑ ${message.content.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤):`);
        message.content.forEach((item, itemIndex) => {
          if (item.type === 'text') {
            console.log(
              `üì§ [API-OUT]     [${itemIndex}] –¢–µ–∫—Å—Ç (${item.text.length} —Å–∏–º–≤–æ–ª–æ–≤):`,
              item.text.length > 500 ? item.text.substring(0, 500) + '...[–û–ë–†–ï–ó–ê–ù–û]' : item.text,
            );
          } else if (item.type === 'image_url') {
            console.log(`üì§ [API-OUT]     [${itemIndex}] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:`, item.image_url?.url?.substring(0, 100) + '...');
          } else {
            console.log(`üì§ [API-OUT]     [${itemIndex}] ${item.type}:`, item);
          }
        });
      }
    });

    const startTime = Date.now();

    // Use structured output
    if (this.withStructuredOutput) {
      console.log('üì§ [API-OUT] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Å—Ö–µ–º–æ–π:', this.modelOutputToolName);

      logger.debug(`[${this.modelName}] Preparing structured output call with schema:`, {
        schemaName: this.modelOutputToolName,
        messageCount: inputMessages.length,
        modelProvider: this.provider,
      });

      const structuredLlm = this.chatLLM.withStructuredOutput(this.modelOutputSchema, {
        includeRaw: true,
        name: this.modelOutputToolName,
      });

      try {
        console.log('üì§ [API-OUT] –í—ã–∑–æ–≤ LLM...');
        logger.debug(`[${this.modelName}] Invoking LLM with structured output...`);
        const response = await structuredLlm.invoke(inputMessages, {
          signal: this.context.controller.signal,
          ...this.callOptions,
        });

        const endTime = Date.now();
        const duration = endTime - startTime;

        // üì• [API-IN] –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM
        console.log('üì• [API-IN] ===== –ü–û–õ–£–ß–ï–ù –û–¢–í–ï–¢ –û–¢ LLM =====');
        console.log('üì• [API-IN] –ú–æ–¥–µ–ª—å:', this.modelName);
        console.log('üì• [API-IN] –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', duration, '–º—Å');
        console.log('üì• [API-IN] –ï—Å—Ç—å parsed:', !!response.parsed);
        console.log('üì• [API-IN] –ï—Å—Ç—å raw:', !!response.raw);

        if (response.raw?.content) {
          const rawContent =
            typeof response.raw.content === 'string' ? response.raw.content : JSON.stringify(response.raw.content);
          console.log(
            'üì• [API-IN] Raw –∫–æ–Ω—Ç–µ–Ω—Ç (',
            rawContent.length,
            '—Å–∏–º–≤–æ–ª–æ–≤):',
            rawContent.length > 2000 ? rawContent.substring(0, 2000) + '...[–û–ë–†–ï–ó–ê–ù–û]' : rawContent,
          );
        }

        if (response.parsed) {
          console.log('üì• [API-IN] Parsed —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(response.parsed, null, 2));
        }

        logger.debug(`[${this.modelName}] LLM response received:`, {
          hasParsed: !!response.parsed,
          hasRaw: !!response.raw,
          rawContent: response.raw?.content?.slice(0, 500) + (response.raw?.content?.length > 500 ? '...' : ''),
        });

        if (response.parsed) {
          console.log('‚úÖ [API-IN] –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥');
          logger.debug(`[${this.modelName}] Successfully parsed structured output`);
          return response.parsed;
        }
        console.error('‚ùå [API-IN] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç:', response);
        logger.error('Failed to parse response', response);
        throw new Error('Could not parse response with structured output');
      } catch (error) {
        const endTime = Date.now();
        const duration = endTime - startTime;

        console.error('‚ùå [API-IN] –û–®–ò–ë–ö–ê –í–´–ó–û–í–ê LLM (', duration, '–º—Å):', error);

        if (isAbortedError(error)) {
          console.error('‚ùå [API-IN] –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω');
          throw error;
        }

        // –î–ª—è G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø—Ä–æ–±—É–µ–º fallback –Ω–∞ —Ä—É—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON
        if (this.provider === ProviderTypeEnum.G4F) {
          console.warn('‚ö†Ô∏è [API-IN] Structured output –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è G4F, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä—É—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ...');
          logger.warning(`[${this.modelName}] Structured output failed for G4F, switching to manual JSON extraction`);

          // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º (–í–ê–ñ–ù–û: –∏–∑–±–µ–≥–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–∏)
          this.withStructuredOutput = false;

          // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º invoke –ø–æ–≤—Ç–æ—Ä–Ω–æ - –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ä—É—á–Ω—ã–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º
          console.log('üì§ [API-OUT] –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ä—É—á–Ω—ã–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º JSON –¥–ª—è G4F...');
          // –õ–æ–≥–∏–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∏–∂–µ
        } else {
          console.error('‚ùå [API-IN] –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ LLM:', error);
          logger.error(`[${this.modelName}] LLM call failed with error:`, error);
          const errorMessage = `Failed to invoke ${this.modelName} with structured output: ${error}`;
          throw new Error(errorMessage);
        }
      }
    }

    // Without structured output support, need to extract JSON from model output manually
    console.log('üì§ [API-OUT] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON (—Ñ–æ–ª–±—ç–∫)');
    logger.debug(`[${this.modelName}] Using manual JSON extraction fallback method`);
    const convertedInputMessages = convertInputMessages(inputMessages, this.modelName);

    console.log('üì§ [API-OUT] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    try {
      console.log('üì§ [API-OUT] –í—ã–∑–æ–≤ LLM (—Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º)...');
      const response = await this.chatLLM.invoke(convertedInputMessages, {
        signal: this.context.controller.signal,
        ...this.callOptions,
      });

      const endTime = Date.now();
      const duration = endTime - startTime;

      console.log('üì• [API-IN] ===== –û–¢–í–ï–¢ –û–¢ LLM (–†–£–ß–ù–û–ô –†–ï–ñ–ò–ú) =====');
      console.log('üì• [API-IN] –ú–æ–¥–µ–ª—å:', this.modelName);
      console.log('üì• [API-IN] –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', duration, '–º—Å');
      console.log('üì• [API-IN] –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', typeof response.content);

      if (typeof response.content === 'string') {
        console.log(
          'üì• [API-IN] –ö–æ–Ω—Ç–µ–Ω—Ç (—Å—Ç—Ä–æ–∫–∞, ',
          response.content.length,
          ' —Å–∏–º–≤–æ–ª–æ–≤):',
          response.content.length > 2000 ? response.content.substring(0, 2000) + '...[–û–ë–†–ï–ó–ê–ù–û]' : response.content,
        );

        const cleanedContent = removeThinkTags(response.content);
        if (cleanedContent !== response.content) {
          console.log(
            'üß© [API-IN] –£–¥–∞–ª–µ–Ω—ã think —Ç–µ–≥–∏, –æ—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:',
            cleanedContent.length > 1000 ? cleanedContent.substring(0, 1000) + '...[–û–ë–†–ï–ó–ê–ù–û]' : cleanedContent,
          );
        }

        response.content = cleanedContent;

        try {
          console.log('üîç [API-IN] –ó–∞–ø—É—Å–∫ JSON –º–æ–Ω–∏—Ç–æ—Ä–∞ –∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞...');
          // Use JSON Monitor for comprehensive real-time validation
          const agentType = this.id === 'navigator' ? 'navigator' : 'planner';
          const monitorResult = await jsonMonitor.monitorResponse(
            response.content,
            agentType,
            `Agent: ${this.id}, Model: ${this.modelName}, Provider: ${this.provider}`,
          );

          console.log('üìä [API-IN] –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', {
            isValid: monitorResult.isValid,
            agentType: monitorResult.agentType,
            hasErrors: monitorResult.errors.length > 0,
            hasCorrectedResponse: !!monitorResult.correctedResponse,
          });

          if (monitorResult.errors && monitorResult.errors.length > 0) {
            console.warn('‚ö†Ô∏è [API-IN] –û—à–∏–±–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', monitorResult.errors);
          }

          // Use monitored and validated data (either original or corrected)
          const finalJson = monitorResult.validatedData || monitorResult.correctedResponse || monitorResult.parsedJson;
          if (finalJson) {
            console.log('‚úÖ [API-IN] –§–∏–Ω–∞–ª—å–Ω—ã–π JSON –ø–æ—Å–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', JSON.stringify(finalJson, null, 2));

            // Final validation against the model schema
            console.log('üîç [API-IN] –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...');
            const parsed = this.validateModelOutput(finalJson);
            if (parsed) {
              console.log('‚úÖ [API-IN] –ú–æ–¥–µ–ª—å –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—à–ª–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é:', JSON.stringify(parsed, null, 2));
              return parsed;
            }
          } else {
            console.error('‚ùå [API-IN] –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
          }
        } catch (error) {
          console.error('‚ùå [API-IN] –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ JSON:', error);
          logger.error(`[${this.modelName}] JSON monitoring failed:`, error);

          // Ultimate fallback - create a basic valid response
          console.log('üÜò [API-IN] –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ fallback –æ—Ç–≤–µ—Ç–∞...');
          const agentType = this.id === 'navigator' ? 'navigator' : 'planner';
          const fallbackResponse = this.createEmergencyFallback(agentType, response.content);

          console.log('üîß [API-IN] –ê–≤–∞—Ä–∏–π–Ω—ã–π fallback —Å–æ–∑–¥–∞–Ω:', JSON.stringify(fallbackResponse, null, 2));
          const parsed = this.validateModelOutput(fallbackResponse);
          if (parsed) {
            console.log('‚úÖ [API-IN] –ê–≤–∞—Ä–∏–π–Ω—ã–π fallback —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω');
            return parsed;
          }

          const errorMessage = `Complete JSON monitoring failure for ${this.modelName}: ${error}`;
          throw new Error(errorMessage);
        }
      } else {
        console.log('üì• [API-IN] –ö–æ–Ω—Ç–µ–Ω—Ç (–Ω–µ —Å—Ç—Ä–æ–∫–∞):', response.content);
      }
    } catch (error) {
      const endTime = Date.now();
      const duration = endTime - startTime;

      console.error('‚ùå [API-IN] –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ LLM –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ (', duration, '–º—Å):', error);
      logger.error(`[${this.modelName}] LLM call failed in manual extraction mode:`, error);
      throw error;
    }

    const errorMessage = `Failed to parse response from ${this.modelName}`;
    console.error('‚ùå [API-IN] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç:', errorMessage);
    logger.error(errorMessage);
    throw new Error('Could not parse response');
  }

  // Execute the agent and return the result
  abstract execute(): Promise<AgentOutput<M>>;

  // Helper method to validate metadata
  protected validateModelOutput(data: unknown): this['ModelOutput'] | undefined {
    if (!this.modelOutputSchema || !data) return undefined;
    try {
      return this.modelOutputSchema.parse(data);
    } catch (error) {
      logger.error('validateModelOutput', error);
      throw new Error('Could not validate model output');
    }
  }

  // Emergency fallback when all validation fails
  protected createEmergencyFallback(
    agentType: 'navigator' | 'planner',
    originalResponse: string,
  ): Record<string, unknown> {
    console.log('üÜò [EMERGENCY] Creating emergency fallback for', agentType);

    const responseSnippet = originalResponse.substring(0, 150).trim();

    // üîí Enhanced safety check - ensure we have a valid, safe URL
    const safeUrl = 'https://www.google.com/';

    // Check if we're on an empty or problematic page
    let isEmptyOrProblematic = false;
    this.context.browserContext
      .getCachedState()
      .then(state => {
        isEmptyOrProblematic =
          !state?.url ||
          state.url === 'about:blank' ||
          state.url === 'chrome://newtab/' ||
          state.url === 'edge://newtab/' ||
          state.url.startsWith('chrome://') ||
          state.url.startsWith('edge://') ||
          state.url.startsWith('moz-extension://') ||
          state.url.startsWith('chrome-extension://');
        console.log(
          `üîç [EMERGENCY] Current browser state: URL=${state?.url}, Empty/Problematic: ${isEmptyOrProblematic}`,
        );
      })
      .catch(err => {
        console.error('‚ùå [EMERGENCY] Failed to get browser state:', err);
        isEmptyOrProblematic = true; // Assume problematic if we can't check
      });

    if (agentType === 'planner') {
      return {
        observation: `JSON parsing failed: ${responseSnippet}. Providing safe navigation plan.`,
        done: false,
        challenges: 'Model output was not properly formatted JSON',
        next_steps: 'Navigate to Google as a safe, universal starting point for any web tasks',
        final_answer: '',
        reasoning: 'Google provides a safe, reliable platform for web navigation and search tasks',
        web_task: true,
      };
    } else {
      // Navigator fallback - provide specific navigation action
      return {
        current_state: {
          evaluation_previous_goal: 'JSON parsing failed, need safe navigation',
          memory: `Previous response was malformed: ${responseSnippet.substring(0, 50)}...`,
          next_goal: 'Navigate to Google as safe starting point',
        },
        action: [
          {
            go_to_url: {
              intent: 'Navigate to Google as safe fallback after JSON parsing failure',
              url: safeUrl,
            },
          },
        ],
      };
    }
  }
}
